[[questions]]
id = "35a75881-eb08-486c-92b3-413ab512138a"
type = "MultipleChoice"
prompt.prompt = """
Consider these two methods that increment a field of a struct. Which style would be more idiomatic for Rust?

```
struct Point(i32, i32);
impl Point {
  fn incr_v1(mut self)  { self.0 += 1; }
  fn incr_v2(&mut self) { self.0 += 1; }
}
```
"""
answer.answer = "`incr_v2`"
prompt.distractors = [
  "`incr_v1`",
  "Both are idiomatic",
  "Neither are idiomatic"
]
prompt.answerIndex = 1
context = """
The `incr_v1` method is not idiomatic, because it consumes ownership of the `Point`. This means after calling `p.incr_v1()`, `p` 
would be unusable, which is probably not intended for this method.
"""

[[questions]]
id = "03a0a1ec-8ce6-40f2-b8b7-6dd5402aeb7d"
type = "Tracing"
prompt.program = """
struct Point(i32, i32);
impl Point {
  fn incr_x(&mut self) {
    self.0 += 1;
  }
}

fn main() {
  let mut p = Point(0, 0);
  p.incr_x();
  println!("{}", p.0);
}
"""
answer.doesCompile = true
answer.stdout = "1"
context = """ 
Remember that `.0` is valid for tuple structs like `Point`.
"""

[[questions]]
id = "be7be598-8a31-4c1a-9171-4ff90f512430"
type = "Tracing"
prompt.program = """
struct Point {
  x: i32,
  y: i32
}

impl Point {
  fn get_x(&mut self) -> &mut i32 {
    &mut self.x
  }
}

fn main() {
  let mut p = Point { x: 1, y: 2 };
  let x = p.get_x();
  *x += 1;
  println!("{} {}", *x, p.y);
}
"""
answer.doesCompile = false
answer.lineNumber = 16
context = """ 
Because `get_x` mutably borrows all of `p`, a program cannot use `p` in any way until `x` is no longer used. 
Therefore reading `x` and `p.y` in the same line is an ownership error.
"""