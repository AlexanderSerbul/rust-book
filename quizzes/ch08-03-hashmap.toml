[[questions]]
id = "f76aba3c-2e95-428a-9366-93b03264a8b6"
type = "Tracing"
prompt.program = """
use std::collections::HashMap;
fn main() {
  let mut h = HashMap::new();
  h.insert("k1", 0);
  let v1 = &h["k1"];
  h.insert("k2", 1);
  let v2 = &h["k2"];
  println!("{} {}", v1, v2);
}
"""
answer.doesCompile = false
answer.lineNumber = 6
context = """
`h` cannot be mutated (`h.insert("k2", 1)`) while an immutable reference (`v1`) to it is live.
"""

[[questions]]
id = "6028c7f5-b373-475f-ba43-553773c7b3b7"
type = "Tracing"
prompt.program = """
use std::collections::HashMap;
fn main() {
  let mut h: HashMap<char, Vec<usize>> = HashMap::new();
  for (i, c) in "hello!".chars().enumerate() {
    h.entry(c).or_insert(Vec::new()).push(i);
  }
  let mut sum = 0;
  for i in h.get(&'l').unwrap() {
    sum += *i;
  }
  println!("{}", sum);
}
"""
answer.doesCompile = true
answer.stdout = "5"
context = """
This program stores a vector of indexes for each occurrence of a given letter into a hashmap. 
Then it sums all the indexes for the letter 'l', which occurs at indexes 2 and 3 in the string `"hello!"`.
"""
