[[questions]]
type = "MultipleChoice"
prompt.prompt = """
In some concurrency APIs, a mutex is separate from the data it guards. For example, imagine a hypothetical Mutex API like this:

```
let mut data = Vec::new();
let mx: Mutex = Mutex::new();
{
    let _guard = mx.lock();
    data.push(0);
}
```

Which of the following best describes why Rust uses `Mutex<T>` instead of just `Mutex`?
"""
answer.answer = "To prevent accessing a mutex's data without locking the mutex"
prompt.distractors = [
    "To require fewer calls to mutex methods",
    "To improve the efficiency of concurrent programs with mutexes",
    "To prevent a mutex's data from being moved between threads"
]
context = """
The `Mutex<T>` design ensures that a mutex's data can only be accessed when the mutex is locked, and conversely
that the mutex is unlocked once the data is no longer accessible.
"""

[[questions]]
type = "Tracing"
prompt.program = """
use std::{sync::Arc, thread};

fn main() {
    let s = String::from("Hello world");
    let a = Arc::new(&s);
    let a2 = Arc::clone(&a);
    let t = thread::spawn(move || a2.len());
    let len = t.join().unwrap();
    println!("{} {}", a, len);
}
"""
answer.doesCompile = false
answer.lineNumber = 7
context = """
An `Arc` is still not safe to use if its data contains a reference, since the reference could (in theory)
be invalidated before all threads containing the `Arc` finish executing.
"""