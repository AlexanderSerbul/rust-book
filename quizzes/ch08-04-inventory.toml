[[questions]]
id = "867e5d29-c1eb-44b3-99e3-bb2325b74e44"
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**

```ide
/// Removes all the zeros in-place from a vector of integers.
fn remove_zeros(v: &mut Vec<i32>) {
    for (i, t) in v.iter().enumerate().rev() {
        if *t == 0 {
            v.remove(i);
            v.shrink_to_fit();
        }
    }
}
```

If you tried to compile this function, which of the following best describes the compiler error you would get?
"""
answer.answer = "`v.remove(i)` cannot borrow `v` as mutable"
prompt.distractors = [
  "`v` does not live long enough to call `v.remove(i)`",
  "`t` cannot be dereferenced while `i` is live",
  "`v.iter()` cannot be called on a mutable reference"
]
context = """
The function `v.iter()` immutably borrows a vector `v` for the duration of the for-loop. However, `v.remove(i)` requires a mutable
reference to `v`. Therefore `v.remove(i)` cannot borrow `v` as mutable, since that would conflict with the iterator.
"""


[[questions]]
id = "dd1bd092-ef8d-4293-a4d6-6a59b5887e98"
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**

```ide
/// Removes all the zeros in-place from a vector of integers.
fn remove_zeros(v: &mut Vec<i32>) {
    for (i, t) in v.iter().enumerate().rev() {
        if *t == 0 {
            v.remove(i);
            v.shrink_to_fit();
        }
    }
}
```

Normally if you try to compile this function, the compiler returns the following error:

```text
error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable
 --> test.rs:5:13
  |
3 |     for (i, t) in v.iter().enumerate().rev() {
  |                   --------------------------
  |                   |
  |                   immutable borrow occurs here
  |                   immutable borrow later used here
4 |         if *t == 0 {
5 |             v.remove(i);
  |             ^^^^^^^^^^^ mutable borrow occurs here
```

Assume that the compiler did NOT reject this function. Which (if any) of the following programs would
(1) pass the compiler, and (2) possibly cause undefined behavior if executed?
Check each program that satisfies both criteria, OR check "None of these programs" if none are satisfying.
"""
answer.answer = [
"""
```
let mut v = vec![5, 5, 0];
remove_zeros(&mut v);
println!("{:?}", v);
```
""",
"""
```
let mut v = vec![1, 2, 0, 3];
remove_zeros(&mut v);
```
""", 
]
prompt.distractors = [
"""
```
let mut v = vec![1; 100];
remove_zeros(&mut v);
```
""",
"None of these programs",
]
context = """
To violate memory safety, `remove_zeros` must be called with a vector that contains a zero after the first element.
The call to `v.shrink_to_fit()` will deallocate memory owned by the vector (due to resizing), which will invalidate the
iterator `v.iter()` which contains a pointer to the old data. Note that reading the vector `v` after calling `remove_zeros`
is not essential to the safety violation, since the issue is internal to `remove_zeros`.
"""

[[questions]]
id = "c7e7e1e1-2788-4dd9-9c18-436bc95b405f"
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**

```ide
/// Removes all the zeros in-place from a vector of integers.
fn remove_zeros(v: &mut Vec<i32>) {
    for (i, t) in v.iter().enumerate().rev() {
        if *t == 0 {
            v.remove(i);
            v.shrink_to_fit();
        }
    }
}
```

Of the following fixes (highlighted in yellow), which fix best satisfies these three criteria:
1. The fixed function passes the Rust compiler,
2. The fixed function preserves the intention of the original code, and
3. The fixed function does not introduce unnecessary inefficiencies
"""
answer.answer = """
```ide
fn remove_zeros(v: &mut Vec<i32>) {
    for `[i in (0 .. v.len()).rev()]` {
        if `[v[i]]` == 0 {
            v.remove(i);
            v.shrink_to_fit();
        }
    }
}
```
"""
prompt.distractors = [
"""
```ide
fn remove_zeros(v: &mut Vec<i32>) {
    for (i, t) in v`[.clone()]`.iter().enumerate().rev() {
        if *t == 0 {
            v.remove(i);
            v.shrink_to_fit();
        }
    }
}
```
""",
"""
```ide
fn remove_zeros(v: `[&]`Vec<i32>) `[-> Vec<i32>]` {
    `[let mut new_vec = Vec::new();]`
    for (i, t) in v.iter().enumerate().rev() {
        if *t `[!=]` 0 {
            `[new_vec.push(*t)]`
        }
    }
    `[new_vec]`
}
```
""",
"""
```ide
fn remove_zeros(v: `[Vec<i32>]`) {
    for (i, t) in v.iter().enumerate().rev() {
        if *t == 0 {
            v.remove(i);
            v.shrink_to_fit();
        }
    }
}
```
""",
]
context = """
Any strategy that requires allocating a new vector, either via `Vec::clone` or `Vec::new`, requires unnecessary additional allocation.
Therefore the simplest strategy that works is to only iterate over the indices `0 .. v.len()` which does not borrow `v`. We do this
in reverse order to avoid removing missing indexes.

Like with Problem 1, the most idiomatic strategy is actually to use a built-in function we haven't discussed,
[`Vec::retain`](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain). This function keeps only elements in a vector
that pass a predicate, but does so with more memory-efficiency.
"""

[[questions]]
id = "fb0e3080-7cc8-4338-948e-fae693d137c8"
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**

```ide
/// Reverses the elements of a vector in-place
fn reverse(v: &mut Vec<String>) {
    let n = v.len();
    for i in 0 .. n / 2 {
        std::mem::swap(&mut v[i], &mut v[n - i - 1]);
    }
}
```

If you tried to compile this program, which of the following best describes the compiler error you would get?
"""
answer.answer = "cannot borrow `v` as mutable twice for `v[i]` and `v[n - i - 1]`"
prompt.distractors = [
  "cannot borrow `v` as immutable for `v.len()` when `v` is a mutable borrow",
  "cannot mutably borrow an element `v[i]` of a mutable vector"
]
context = """
The compiler does not consider the specific value of the indexes used to access an array, so `&mut v[i]`
and `&mut v[n - i - 1]` are assumed to possibly refer to the same element. Therefore we get an error
where `v` cannot be mutably borrowed twice.
"""


[[questions]]
id = "4c703871-3cc3-483f-beb5-876bdbcd223b"
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**

```ide
/// Reverses the elements of a vector in-place
fn reverse(v: &mut Vec<String>) {
    let n = v.len();
    for i in 0 .. n / 2 {
        std::mem::swap(&mut v[i], &mut v[n - i - 1]);
    }
}
```

Normally if you try to compile this function, the compiler returns the following error:

```text
error[E0499]: cannot borrow `*v` as mutable more than once at a time
 --> test.rs:5:40
  |
5 |         std::mem::swap(&mut v[i], &mut v[n - i - 1]);
  |         --------------      -          ^ second mutable borrow occurs here
  |         |                   |
  |         |                   first mutable borrow occurs here
  |         first borrow later used by call
```

Assume that the compiler did NOT reject this function. Which (if any) of the following programs would
(1) pass the compiler, and (2) possibly cause undefined behavior if executed?
Check each program that satisfies both criteria, OR check "None of these programs" if none are satisfying.
"""
answer.answer = ["None of these programs"]
prompt.distractors = [
"""
```
let mut v = vec![String::from("a"), String::from("b")];
let x = &v[0];
reverse(&mut v);
println!("{x}");
```
""",
"""
```
let mut v = vec![String::from("a"), String::from("b")];
reverse(&mut v);
```
""",
"""
```
let mut v = vec![String::from("a"), String::from("b")];
reverse(&mut v);
println!("{:?}", v);
```
""",
]
context = """
This function cannot cause a memory safety violation because `i != n - i - 1` for all `i`, so the two
mutable references always refer to different elements. Note that the `let x = &v[0]` program would not
compile, as Rust's borrow checker would not allow `reverse` to be called while `x` is live.
"""

[[questions]]
id = "380fc77f-190d-4386-9e0e-f9360bbbfd98"
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**

```ide
/// Reverses the elements of a vector in-place
fn reverse(v: &mut Vec<String>) {
    let n = v.len();
    for i in 0 .. n / 2 {
        std::mem::swap(&mut v[i], &mut v[n - i - 1]);
    }
}
```

Of the following fixes (highlighted in yellow), which fix best satisfies these three criteria:
1. The fixed function passes the Rust compiler,
2. The fixed function preserves the intention of the original code, and
3. The fixed function does not introduce unnecessary inefficiencies
"""
answer.answer = """
```ide
fn reverse(v: &mut Vec<String>) {
    let n = v.len();
    for i in 0 .. n / 2 {
        `[let p1 = &mut v[i] as *mut String;]`
        `[let p2 = &mut v[n - i - 1] as *mut String;]`
        `[unsafe { std::ptr::swap_nonoverlapping(p1, p2, 1); }]`
    }
}
```
"""
prompt.distractors = [
"""
```ide
fn reverse(v: &mut Vec<String>) {
    let n = v.len();
    `[let mut v2 = v.clone();]`
    for i in 0 .. n / 2 {
        std::mem::swap(&mut v[i], &mut `[v2]`[n - i - 1]);
    }
}
```
""",
"""
```ide
fn reverse(v: `[&Vec<String>]`) -> `[Vec<String>]` {
    let n = v.len();
    `[let mut v2 = Vec::new();]`    
    for _ in 0 .. `[n]` {
        `[v2.push(v.pop().unwrap());]`
    }
    `[v2]`
}
```
""",
"""
```ide
fn reverse(v: &mut Vec<String>) {
    let n = v.len();    
    for i in 0 .. n / 2 {
        `[let s1 = v[i].clone();]`
        `[let s2 = v[n - i - 1].clone();]`
        `[v[i] = s2;]`
        `[v[n - i - 1] = s1;]`
    }
}
```
""",
]
context = """
In a situation where the borrow checker rejects an operation that is actually safe and has no workaround, then
unsafe code is sometimes acceptable if it's critical to avoid allocations. 
In this specific case, you should actually use [`Vec::swap`](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.swap), which is internally implemented
with heavily-tested `unsafe` code similar to the code above. 
But in general, if the standard library doesn't happen to support your use case, then `unsafe` can be acceptable if used correctly.
"""