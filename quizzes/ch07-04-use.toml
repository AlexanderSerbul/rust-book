[[questions]]
id = "a162c2c8-aadf-4963-a997-02a1035f2459"
type = "MultipleChoice"
prompt.prompt = "Which of the following statements best describes the function of the `use` keyword?"
answer.answer = "`use` reduces the verbosity of referring to items in the used path"
prompt.distractors = [
  "`use` copies the contents of an item from one module to another",
  "`use` allows access to items that circumvents normal privacy rules",
  "`use` indicates to the compiler that an item will be used and should be optimized"
]
context = """
`use` allows references to items in the used path that are shorter than without the `use`, reducing the verbosity of reference.
"""


[[questions]]
id = "eccc2099-9880-4628-8474-f1d55e2a4a4a"
type = "ShortAnswer"
prompt.prompt = """
Consider this module and `use` statement:

```
pub mod parent {
  pub fn a() {}
  fn b() {}
  pub mod child {
    pub fn c() {}
  }
}

fn main() {
  use parent::{*, child as alias};
  // ...
}
```

Inside `main`, what is the total number of paths that can refer to `a`, `b`, or `c` (not including those that use `self`, `super`, or `crate`)?
Write your answer as a digit such as 0 or 1. For example, if the only two valid paths were `a` and `parent::b`, then the answer would be 2.
"""
answer.answer = "5"
context = """
There are two paths to `a`: `parent::a` and `a`. There are no paths to `b`, because it is private. There are three paths to `c`:
`parent::child::c`, `child::c`, `alias::c`.
"""