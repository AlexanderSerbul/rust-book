[[questions]]
id = "5af7c045-95dc-4bd0-9318-7204732e3ed5"
type = "Tracing"
prompt.program = """
fn main() {
  let mut v = vec![1, 2, 3];
  for i in &mut v {
    v.push(*i);
  }
  println!("{} {} {}", v[3], v[4], v[5]);
}
"""
answer.doesCompile = false
answer.lineNumber = 4
context = """
Even though `v` is mutably borrowed, that only allows `i` to be mutated inside the for-loop, not `v`. Therefore calling `v.push` is an ownership error.
"""

[[questions]]
id = "e8da8773-8df2-4279-8c27-b7e9eda1dddd"
type = "Tracing"
prompt.program = """
fn main() {
  let mut v: Vec<i32> = vec![1, 2, 3];
  let mut v2: Vec<&mut i32> = Vec::new();
  for i in &mut v {
    v2.push(i);
  }
  *v2[0] = 5;

  let a = *v2[0];
  let b = v[0];
  println!("{a} {b}");
}
"""
answer.doesCompile = true
answer.stdout = "5 5"
context = """
`i` has type `&mut i32`, meaning it is a pointer to a number within `v`. So if we push `i` into `v2`, then `v2` contains pointers to `v`. Therefore
mutating `v2[0]` actually mutates `v[0]`.
"""