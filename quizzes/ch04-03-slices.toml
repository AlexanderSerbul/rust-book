[[questions]]
id = "7fbda6e4-dca7-458e-ab52-fab03181f90b"
type = "MultipleChoice"
prompt.prompt = """
Consider the variables `s2` and `s3` in the following program. These two variables will be located in memory within the stack frame for `main`. Each variable has a size in memory on the stack, *not* including the size of pointed data. Which statement is true about the sizes of `s2` and `s3`?

```
fn main() {
  let s = String::from("hello");
  let s2: &String = &s;
  let s3: &str = &s[..];
}
```
"""
answer.answer = "`s3` has more bytes than `s2`"
prompt.distractors = [
  "`s3` has the same number of bytes as `s2`",
  "`s3` has fewer bytes than `s2`"
]
context = """
The type `&String` is a normal reference consisting of a single pointer, so 8 bytes on a 64-bit architecture. The type `&str` is a special slice reference which consists of a pointer *and* a length, so 16 bytes. Therefore `s3` of type `&str` uses more memory than `s2` of type `&String`. You can verify this yourself using [`std::mem::size_of`](https://doc.rust-lang.org/std/mem/fn.size_of.html), like so:

```rust
fn main() {
  println!(
    "&String={} &str={}",
    std::mem::size_of::<&String>(),
    std::mem::size_of::<&str>(),
  );
}
```

Also, note that Rust will implicitly convert string references to either `&String` or `&str` based on the context of the reference. So the expression `&s` produces two different values based on the expected type of `&s`.
"""

[[questions]]
id = "adcfc154-03bd-470a-bacb-b3cad97cfc7f"
type = "Tracing"
prompt.program = """
fn main() {
  let mut s = String::from("hello");
  for &item in s.as_bytes().iter() {
    if item == b'l' {
      s.push_str(" world");
    }
  }
  println!("{s}");
}
"""
answer.doesCompile = false
answer.lineNumber = 5
context = """
Because `s.as_bytes()` produces an immutable reference to `s`, it is illegal to mutate `s` (via `push_str`) inside the for-loop.
"""