[[questions]]
type = "Tracing"
prompt.program = """
fn expect_none(x: Option<i32>) -> ! {
    match x {
        Some(n) => panic!("Expected none, found Some({n})"),
        None => ()
    }
}

fn main() {
    println!("{:?}", expect_none(None));
}
"""
answer.doesCompile = false
answer.lineNumber = 4
context = """
The `!` type is not an appropriate return type for this function because it only panics
some of the time, not all of the time.
"""

[[questions]]
type = "Tracing"
prompt.program = """
fn is_equal<T: Eq>(t1: &T, t2: &T) -> bool {
  t1 == t2
}

fn main() {
  println!("{:?}", is_equal("Hello", "world"));
}

"""
answer.doesCompile = false
answer.lineNumber = 6
context = """
Unless `T` is marked as `?Sized`, then the type `&str` cannot be passed to `is_equal` 
as `str` is not `Sized`.
"""
